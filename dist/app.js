/*! For license information please see app.js.LICENSE.txt */
(()=>{"use strict";var e,t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),function(e){e.CuriousReader="CuriousReader",e.GDL="GDL",e.Unknown="Unknown"}(e||(e={}));class n{constructor(e){this.emptyGlowImageTag="empty_glow_image",this.contentFilePath=e}async parseBook(){return new Promise(((e,t)=>{this.parseContentJSONFile().then((t=>{this.contentJSON=t,console.log("Content JSON file parsed!"),console.log(this.contentJSON);let n={bookName:"",pages:[],bookType:this.determineBookType()};n.pages=this.parsePages(n),e(n)})).catch((e=>{t(e)}))}))}determineBookType(){return void 0!==this.contentJSON.presentation?e.CuriousReader:void 0!==this.contentJSON.chapters?e.GDL:e.Unknown}parsePages(t){let n=[];if(t.bookType===e.CuriousReader){let e=this.contentJSON.presentation.slides,t=this.contentJSON.presentation.globalBackgroundSelector.fillGlobalBackground;for(let i=0;i<e.length;i++){let r=e[i],o={visualElements:[],backgroundColor:t};o.visualElements=this.parsePageCR(r),n.push(o)}}else if(t.bookType===e.GDL){let e=this.contentJSON.chapters,t="#FCFCF2";for(let i=0;i<e.length;i++){let r=e[i],o={visualElements:[],backgroundColor:t};o.visualElements=this.parsePageGDL(r),n.push(o)}}else console.log("Unknown book type!");return n}parsePageCR(e){let t=[],n=e.elements;for(let e=0;e<n.length;e++){let i=n[e].action.library;if(i.includes("AdvancedText")){let i=this.parseTextElementCR(n[e]);t.push(i)}else if(i.includes("Image")){let i=this.parseImageElementCR(n[e]);t.push(i)}else if(i.includes("Audio")){let i=this.parseAudioElementCR(n[e]);t.push(i)}}return t}parsePageGDL(e){let t=[],n=e.params.content;for(let e=0;e<n.length;e++){let i=n[e].content.library;if(i.includes("AdvancedText")){let i=this.parseTextElementGDL(n[e].content.params);t.push(i)}else if(i.includes("Image")){let i=this.parseImageElementGDL(n[e].content.params);t.push(i)}}return t}parseTextElementCR(e){return{type:"text",positionX:e.x,positionY:e.y,width:e.width,height:e.height,textContentAsHTML:e.action.params.text}}parseTextElementGDL(e){return{type:"text",positionX:NaN,positionY:NaN,width:NaN,height:NaN,textContentAsHTML:e.text}}parseImageElementCR(e){let t="";return t=void 0===e.action.params.file?this.emptyGlowImageTag:e.action.params.file.path,{domID:t===this.emptyGlowImageTag?e.id:e.action.subContentId,type:"image",positionX:e.x,positionY:e.y,width:e.width,height:e.height,imageSource:t}}parseImageElementGDL(e){return{domID:"",type:"image",positionX:NaN,positionY:NaN,width:e.width,height:e.height,imageSource:e.file.path}}parseAudioElementCR(e){let t={timestamps:[]},n=e.action.params.timeStampForEachText;for(let i=0;i<n.length;i++){let r=i,o=n[i],a={domID:e.action.subContentId+"_"+r.toString(),word:o.text.replace(/&#039;/g,"'"),startTimestamp:o.startDuration,endTimestamp:o.endDuration,audioSrc:o.wordfile[0].path};t.timestamps.push(a)}return{domID:e.action.subContentId,type:"audio",positionX:e.x,positionY:e.y,width:e.width,height:e.height,glowColor:e.action.params.glowColor,audioSrc:e.action.params.files[0].path,audioTimestamps:t,styles:""}}async parseContentJSONFile(){return new Promise(((e,t)=>{let n=new XMLHttpRequest;n.open("GET",this.contentFilePath,!0),n.responseType="json",n.onload=function(){if(200===n.status){let t=n.response;delete t.l10n,delete t.override,e(t)}else t(n.response)},n.send()}))}}function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r="(prefers-reduced-motion: reduce)";function o(e){e.length=0}function a(e,t,n){return Array.prototype.slice.call(e,t,n)}function s(e){return e.bind.apply(e,[null].concat(a(arguments,1)))}var c=setTimeout,l=function(){};function u(e){return requestAnimationFrame(e)}function d(e,t){return typeof t===e}function h(e){return!v(e)&&d("object",e)}var f=Array.isArray,p=s(d,"function"),g=s(d,"string"),m=s(d,"undefined");function v(e){return null===e}function y(e){try{return e instanceof(e.ownerDocument.defaultView||window).HTMLElement}catch(e){return!1}}function w(e){return f(e)?e:[e]}function b(e,t){w(e).forEach(t)}function E(e,t){return e.indexOf(t)>-1}function I(e,t){return e.push.apply(e,w(t)),e}function S(e,t,n){e&&b(t,(function(t){t&&e.classList[n?"add":"remove"](t)}))}function C(e,t){S(e,g(t)?t.split(" "):t,!0)}function P(e,t){b(t,e.appendChild.bind(e))}function T(e,t){b(e,(function(e){var n=(t||e).parentNode;n&&n.insertBefore(e,t)}))}function A(e,t){return y(e)&&(e.msMatchesSelector||e.matches).call(e,t)}function k(e,t){var n=e?a(e.children):[];return t?n.filter((function(e){return A(e,t)})):n}function D(e,t){return t?k(e,t)[0]:e.firstElementChild}var x=Object.keys;function L(e,t,n){return e&&(n?x(e).reverse():x(e)).forEach((function(n){"__proto__"!==n&&t(e[n],n)})),e}function O(e){return a(arguments,1).forEach((function(t){L(t,(function(n,i){e[i]=t[i]}))})),e}function B(e){return a(arguments,1).forEach((function(t){L(t,(function(t,n){f(t)?e[n]=t.slice():h(t)?e[n]=B({},h(e[n])?e[n]:{},t):e[n]=t}))})),e}function N(e,t){b(t||x(e),(function(t){delete e[t]}))}function M(e,t){b(e,(function(e){b(t,(function(t){e&&e.removeAttribute(t)}))}))}function F(e,t,n){h(t)?L(t,(function(t,n){F(e,n,t)})):b(e,(function(e){v(n)||""===n?M(e,t):e.setAttribute(t,String(n))}))}function j(e,t,n){var i=document.createElement(e);return t&&(g(t)?C(i,t):F(i,t)),n&&P(n,i),i}function R(e,t,n){if(m(n))return getComputedStyle(e)[t];v(n)||(e.style[t]=""+n)}function z(e,t){R(e,"display",t)}function $(e){e.setActive&&e.setActive()||e.focus({preventScroll:!0})}function H(e,t){return e.getAttribute(t)}function W(e,t){return e&&e.classList.contains(t)}function G(e){return e.getBoundingClientRect()}function U(e){b(e,(function(e){e&&e.parentNode&&e.parentNode.removeChild(e)}))}function V(e){return D((new DOMParser).parseFromString(e,"text/html").body)}function q(e,t){e.preventDefault(),t&&(e.stopPropagation(),e.stopImmediatePropagation())}function X(e,t){return e&&e.querySelector(t)}function J(e,t){return t?a(e.querySelectorAll(t)):[]}function K(e,t){S(e,t,!1)}function Y(e){return e.timeStamp}function Q(e){return g(e)?e:e?e+"px":""}var Z="splide",ee="data-"+Z;function te(e,t){if(!e)throw new Error("["+Z+"] "+(t||""))}var ne=Math.min,ie=Math.max,re=Math.floor,oe=Math.ceil,ae=Math.abs;function se(e,t,n){return ae(e-t)<n}function ce(e,t,n,i){var r=ne(t,n),o=ie(t,n);return i?r<e&&e<o:r<=e&&e<=o}function le(e,t,n){var i=ne(t,n),r=ie(t,n);return ne(ie(i,e),r)}function ue(e){return+(e>0)-+(e<0)}function de(e,t){return b(t,(function(t){e=e.replace("%s",""+t)})),e}function he(e){return e<10?"0"+e:""+e}var fe={};function pe(){var e=[];function t(e,t,n){b(e,(function(e){e&&b(t,(function(t){t.split(" ").forEach((function(t){var i=t.split(".");n(e,i[0],i[1])}))}))}))}return{bind:function(n,i,r,o){t(n,i,(function(t,n,i){var a="addEventListener"in t,s=a?t.removeEventListener.bind(t,n,r,o):t.removeListener.bind(t,r);a?t.addEventListener(n,r,o):t.addListener(r),e.push([t,n,i,r,s])}))},unbind:function(n,i,r){t(n,i,(function(t,n,i){e=e.filter((function(e){return!!(e[0]!==t||e[1]!==n||e[2]!==i||r&&e[3]!==r)||(e[4](),!1)}))}))},dispatch:function(e,t,n){var i,r=!0;return"function"==typeof CustomEvent?i=new CustomEvent(t,{bubbles:r,detail:n}):(i=document.createEvent("CustomEvent")).initCustomEvent(t,r,!1,n),e.dispatchEvent(i),i},destroy:function(){e.forEach((function(e){e[4]()})),o(e)}}}var ge="mounted",me="ready",ve="move",ye="moved",we="click",be="refresh",Ee="updated",Ie="resize",Se="resized",Ce="scroll",Pe="scrolled",Te="destroy",Ae="navigation:mounted",ke="autoplay:play",_e="autoplay:pause",De="lazyload:loaded",xe="ei";function Le(e){var t=e?e.event.bus:document.createDocumentFragment(),n=pe();return e&&e.event.on(Te,n.destroy),O(n,{bus:t,on:function(e,i){n.bind(t,w(e).join(" "),(function(e){i.apply(i,f(e.detail)?e.detail:[])}))},off:s(n.unbind,t),emit:function(e){n.dispatch(t,e,a(arguments,1))}})}function Oe(e,t,n,i){var r,o,a=Date.now,s=0,c=!0,l=0;function d(){if(!c){if(s=e?ne((a()-r)/e,1):1,n&&n(s),s>=1&&(t(),r=a(),i&&++l>=i))return h();o=u(d)}}function h(){c=!0}function f(){o&&cancelAnimationFrame(o),s=0,o=0,c=!0}return{start:function(t){t||f(),r=a()-(t?s*e:0),c=!1,o=u(d)},rewind:function(){r=a(),s=0,n&&n(s)},pause:h,cancel:f,set:function(t){e=t},isPaused:function(){return c}}}var Be="Arrow",Ne=Be+"Left",Me=Be+"Right",Fe=Be+"Up",je=Be+"Down",Re="ttb",ze={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[Fe,Me],ArrowRight:[je,Ne]};var $e="role",He="tabindex",We="aria-",Ge=We+"controls",Ue=We+"current",Ve=We+"selected",qe=We+"label",Xe=We+"labelledby",Je=We+"hidden",Ke=We+"orientation",Ye=We+"roledescription",Qe=We+"live",Ze=We+"busy",et=We+"atomic",tt=[$e,He,"disabled",Ge,Ue,qe,Xe,Je,Ke,Ye],nt=Z+"__",it="is-",rt=Z,ot=nt+"track",at=nt+"list",st=nt+"slide",ct=st+"--clone",lt=st+"__container",ut=nt+"arrows",dt=nt+"arrow",ht=dt+"--prev",ft=dt+"--next",pt=nt+"pagination",gt=pt+"__page",mt=nt+"progress__bar",vt=nt+"toggle",yt=nt+"sr",wt=it+"initialized",bt=it+"active",Et=it+"prev",It=it+"next",St=it+"visible",Ct=it+"loading",Pt=it+"focus-in",Tt=it+"overflow",At=[bt,St,Et,It,Ct,Pt,Tt],kt={slide:st,clone:ct,arrows:ut,arrow:dt,prev:ht,next:ft,pagination:pt,page:gt,spinner:nt+"spinner"},_t="touchstart mousedown",Dt="touchmove mousemove",xt="touchend touchcancel mouseup click",Lt="slide",Ot="loop",Bt="fade";var Nt=ee+"-interval",Mt={passive:!1,capture:!0},Ft={Spacebar:" ",Right:Me,Left:Ne,Up:Fe,Down:je};function jt(e){return e=g(e)?e:e.key,Ft[e]||e}var Rt="keydown",zt=ee+"-lazy",$t=zt+"-srcset",Ht="["+zt+"], ["+$t+"]",Wt=[" ","Enter"],Gt=Object.freeze({__proto__:null,Media:function(e,t,n){var i=e.state,o=n.breakpoints||{},a=n.reducedMotion||{},s=pe(),c=[];function l(e){e&&s.destroy()}function u(e,t){var n=matchMedia(t);s.bind(n,"change",d),c.push([e,n])}function d(){var t=i.is(7),r=n.direction,o=c.reduce((function(e,t){return B(e,t[1].matches?t[0]:{})}),{});N(n),h(o),n.destroy?e.destroy("completely"===n.destroy):t?(l(!0),e.mount()):r!==n.direction&&e.refresh()}function h(t,r,o){B(n,t),r&&B(Object.getPrototypeOf(n),t),!o&&i.is(1)||e.emit(Ee,n)}return{setup:function(){var e="min"===n.mediaQuery;x(o).sort((function(t,n){return e?+t-+n:+n-+t})).forEach((function(t){u(o[t],"("+(e?"min":"max")+"-width:"+t+"px)")})),u(a,r),d()},destroy:l,reduce:function(e){matchMedia(r).matches&&(e?B(n,a):N(n,x(a)))},set:h}},Direction:function(e,t,n){return{resolve:function(e,t,i){var r="rtl"!==(i=i||n.direction)||t?i===Re?0:-1:1;return ze[e]&&ze[e][r]||e.replace(/width|left|right/i,(function(e,t){var n=ze[e.toLowerCase()][r]||e;return t>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(e){return e*("rtl"===n.direction?1:-1)}}},Elements:function(e,t,n){var i,r,a,s=Le(e),c=s.on,l=s.bind,u=e.root,d=n.i18n,h={},f=[],g=[],m=[];function v(){var e,t,o;i=b("."+ot),r=D(i,"."+at),te(i&&r,"A track/list element is missing."),I(f,k(r,"."+st+":not(."+ct+")")),L({arrows:ut,pagination:pt,prev:ht,next:ft,bar:mt,toggle:vt},(function(e,t){h[t]=b("."+e)})),O(h,{root:u,track:i,list:r,slides:f}),t=u.id||""+(e=Z)+he(fe[e]=(fe[e]||0)+1),o=n.role,u.id=t,i.id=i.id||t+"-track",r.id=r.id||t+"-list",!H(u,$e)&&"SECTION"!==u.tagName&&o&&F(u,$e,o),F(u,Ye,d.carousel),F(r,$e,"presentation"),w()}function y(e){var t=tt.concat("style");o(f),K(u,g),K(i,m),M([i,r],t),M(u,e?t:["style",Ye])}function w(){K(u,g),K(i,m),g=E(rt),m=E(ot),C(u,g),C(i,m),F(u,qe,n.label),F(u,Xe,n.labelledby)}function b(e){var t=X(u,e);return t&&function(e,t){if(p(e.closest))return e.closest(t);for(var n=e;n&&1===n.nodeType&&!A(n,t);)n=n.parentElement;return n}(t,"."+rt)===u?t:void 0}function E(e){return[e+"--"+n.type,e+"--"+n.direction,n.drag&&e+"--draggable",n.isNavigation&&e+"--nav",e===rt&&bt]}return O(h,{setup:v,mount:function(){c(be,y),c(be,v),c(Ee,w),l(document,_t+" keydown",(function(e){a="keydown"===e.type}),{capture:!0}),l(u,"focusin",(function(){S(u,Pt,!!a)}))},destroy:y})},Slides:function(e,t,n){var i=Le(e),r=i.on,a=i.emit,c=i.bind,l=t.Elements,u=l.slides,d=l.list,h=[];function f(){u.forEach((function(e,t){v(e,t,-1)}))}function m(){k((function(e){e.destroy()})),o(h)}function v(t,n,i){var r=function(e,t,n,i){var r,o=Le(e),a=o.on,c=o.emit,l=o.bind,u=e.Components,d=e.root,h=e.options,f=h.isNavigation,p=h.updateOnMove,g=h.i18n,m=h.pagination,v=h.slideFocus,y=u.Direction.resolve,w=H(i,"style"),b=H(i,qe),E=n>-1,I=D(i,"."+lt);function C(){var r=e.splides.map((function(e){var n=e.splide.Components.Slides.getAt(t);return n?n.slide.id:""})).join(" ");F(i,qe,de(g.slideX,(E?n:t)+1)),F(i,Ge,r),F(i,$e,v?"button":""),v&&M(i,Ye)}function P(){r||T()}function T(){if(!r){var n=e.index;(o=A())!==W(i,bt)&&(S(i,bt,o),F(i,Ue,f&&o||""),c(o?"active":"inactive",k)),function(){var t=function(){if(e.is(Bt))return A();var t=G(u.Elements.track),n=G(i),r=y("left",!0),o=y("right",!0);return re(t[r])<=oe(n[r])&&re(n[o])<=oe(t[o])}(),n=!t&&(!A()||E);if(e.state.is([4,5])||F(i,Je,n||""),F(J(i,h.focusableNodes||""),He,n?-1:""),v&&F(i,He,n?-1:0),t!==W(i,St)&&(S(i,St,t),c(t?"visible":"hidden",k)),!t&&document.activeElement===i){var r=u.Slides.getAt(e.index);r&&$(r.slide)}}(),S(i,Et,t===n-1),S(i,It,t===n+1)}var o}function A(){var i=e.index;return i===t||h.cloneStatus&&i===n}var k={index:t,slideIndex:n,slide:i,container:I,isClone:E,mount:function(){E||(i.id=d.id+"-slide"+he(t+1),F(i,$e,m?"tabpanel":"group"),F(i,Ye,g.slide),F(i,qe,b||de(g.slideLabel,[t+1,e.length]))),l(i,"click",s(c,we,k)),l(i,"keydown",s(c,"sk",k)),a([ye,"sh",Pe],T),a(Ae,C),p&&a(ve,P)},destroy:function(){r=!0,o.destroy(),K(i,At),M(i,tt),F(i,"style",w),F(i,qe,b||"")},update:T,style:function(e,t,n){R(n&&I||i,e,t)},isWithin:function(n,i){var r=ae(n-t);return E||!h.rewind&&!e.is(Ot)||(r=ne(r,e.length-r)),r<=i}};return k}(e,n,i,t);r.mount(),h.push(r),h.sort((function(e,t){return e.index-t.index}))}function I(e){return e?_((function(e){return!e.isClone})):h}function k(e,t){I(t).forEach(e)}function _(e){return h.filter(p(e)?e:function(t){return g(e)?A(t.slide,e):E(w(e),t.index)})}return{mount:function(){f(),r(be,m),r(be,f)},destroy:m,update:function(){k((function(e){e.update()}))},register:v,get:I,getIn:function(e){var i=t.Controller,r=i.toIndex(e),o=i.hasFocus()?1:n.perPage;return _((function(e){return ce(e.index,r,r+o-1)}))},getAt:function(e){return _(e)[0]},add:function(e,t){b(e,(function(e){if(g(e)&&(e=V(e)),y(e)){var i=u[t];i?T(e,i):P(d,e),C(e,n.classes.slide),r=e,o=s(a,Ie),l=J(r,"img"),(h=l.length)?l.forEach((function(e){c(e,"load error",(function(){--h||o()}))})):o()}var r,o,l,h})),a(be)},remove:function(e){U(_(e).map((function(e){return e.slide}))),a(be)},forEach:k,filter:_,style:function(e,t,n){k((function(i){i.style(e,t,n)}))},getLength:function(e){return e?u.length:h.length},isEnough:function(){return h.length>n.perPage}}},Layout:function(e,t,n){var i,r,o,a=Le(e),c=a.on,l=a.bind,u=a.emit,d=t.Slides,f=t.Direction.resolve,p=t.Elements,g=p.root,m=p.track,v=p.list,y=d.getAt,w=d.style;function b(){i=n.direction===Re,R(g,"maxWidth",Q(n.width)),R(m,f("paddingLeft"),I(!1)),R(m,f("paddingRight"),I(!0)),E(!0)}function E(e){var t,a=G(g);(e||r.width!==a.width||r.height!==a.height)&&(R(m,"height",(t="",i&&(te(t=C(),"height or heightRatio is missing."),t="calc("+t+" - "+I(!1)+" - "+I(!0)+")"),t)),w(f("marginRight"),Q(n.gap)),w("width",n.autoWidth?null:Q(n.fixedWidth)||(i?"":P())),w("height",Q(n.fixedHeight)||(i?n.autoHeight?null:P():C()),!0),r=a,u(Se),o!==(o=x())&&(S(g,Tt,o),u("overflow",o)))}function I(e){var t=n.padding,i=f(e?"right":"left");return t&&Q(t[i]||(h(t)?0:t))||"0px"}function C(){return Q(n.height||G(v).width*n.heightRatio)}function P(){var e=Q(n.gap);return"calc((100%"+(e&&" + "+e)+")/"+(n.perPage||1)+(e&&" - "+e)+")"}function T(){return G(v)[f("width")]}function A(e,t){var n=y(e||0);return n?G(n.slide)[f("width")]+(t?0:D()):0}function k(e,t){var n=y(e);if(n){var i=G(n.slide)[f("right")],r=G(v)[f("left")];return ae(i-r)+(t?0:D())}return 0}function _(t){return k(e.length-1)-k(0)+A(0,t)}function D(){var e=y(0);return e&&parseFloat(R(e.slide,f("marginRight")))||0}function x(){return e.is(Bt)||_(!0)>T()}return{mount:function(){var e,t;b(),l(window,"resize load",(e=s(u,Ie),t=Oe(0,e,null,1),function(){t.isPaused()&&t.start()})),c([Ee,be],b),c(Ie,E)},resize:E,listSize:T,slideSize:A,sliderSize:_,totalSize:k,getPadding:function(e){return parseFloat(R(m,f("padding"+(e?"Right":"Left"))))||0},isOverflow:x}},Clones:function(e,t,n){var i,r=Le(e),a=r.on,s=t.Elements,c=t.Slides,l=t.Direction.resolve,u=[];function d(){a(be,h),a([Ee,Ie],p),(i=g())&&(function(t){var i=c.get().slice(),r=i.length;if(r){for(;i.length<t;)I(i,i);I(i.slice(-t),i.slice(0,t)).forEach((function(o,a){var l=a<t,d=function(t,i){var r=t.cloneNode(!0);return C(r,n.classes.clone),r.id=e.root.id+"-clone"+he(i+1),r}(o.slide,a);l?T(d,i[0].slide):P(s.list,d),I(u,d),c.register(d,a-t+(l?0:r),o.index)}))}}(i),t.Layout.resize(!0))}function h(){f(),d()}function f(){U(u),o(u),r.destroy()}function p(){var e=g();i!==e&&(i<e||!e)&&r.emit(be)}function g(){var i=n.clones;if(e.is(Ot)){if(m(i)){var r=n[l("fixedWidth")]&&t.Layout.slideSize(0);i=r&&oe(G(s.track)[l("width")]/r)||n[l("autoWidth")]&&e.length||2*n.perPage}}else i=0;return i}return{mount:d,destroy:f}},Move:function(e,t,n){var i,r=Le(e),o=r.on,a=r.emit,s=e.state.set,c=t.Layout,l=c.slideSize,u=c.getPadding,d=c.totalSize,h=c.listSize,f=c.sliderSize,p=t.Direction,g=p.resolve,v=p.orient,y=t.Elements,w=y.list,b=y.track;function E(){t.Controller.isBusy()||(t.Scroll.cancel(),I(e.index),t.Slides.update())}function I(e){S(A(e,!0))}function S(n,i){if(!e.is(Bt)){var r=i?n:function(n){if(e.is(Ot)){var i=T(n),r=i>t.Controller.getEnd();(i<0||r)&&(n=C(n,r))}return n}(n);R(w,"transform","translate"+g("X")+"("+r+"px)"),n!==r&&a("sh")}}function C(e,t){var n=e-_(t),i=f();return e-v(i*(oe(ae(n)/i)||1))*(t?1:-1)}function P(){S(k(),!0),i.cancel()}function T(e){for(var n=t.Slides.get(),i=0,r=1/0,o=0;o<n.length;o++){var a=n[o].index,s=ae(A(a,!0)-e);if(!(s<=r))break;r=s,i=a}return i}function A(t,i){var r=v(d(t-1)-function(e){var t=n.focus;return"center"===t?(h()-l(e,!0))/2:+t*l(e)||0}(t));return i?function(t){return n.trimSpace&&e.is(Lt)&&(t=le(t,0,v(f(!0)-h()))),t}(r):r}function k(){var e=g("left");return G(w)[e]-G(b)[e]+v(u(!1))}function _(e){return A(e?t.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){i=t.Transition,o([ge,Se,Ee,be],E)},move:function(e,t,n,r){var o,c;e!==t&&(o=e>n,c=v(C(k(),o)),o?c>=0:c<=w[g("scrollWidth")]-G(b)[g("width")])&&(P(),S(C(k(),e>n),!0)),s(4),a(ve,t,n,e),i.start(t,(function(){s(3),a(ye,t,n,e),r&&r()}))},jump:I,translate:S,shift:C,cancel:P,toIndex:T,toPosition:A,getPosition:k,getLimit:_,exceededLimit:function(e,t){t=m(t)?k():t;var n=!0!==e&&v(t)<v(_(!1)),i=!1!==e&&v(t)>v(_(!0));return n||i},reposition:E}},Controller:function(e,t,n){var i,r,o,a,c=Le(e),l=c.on,u=c.emit,d=t.Move,h=d.getPosition,f=d.getLimit,p=d.toPosition,v=t.Slides,y=v.isEnough,w=v.getLength,b=n.omitEnd,E=e.is(Ot),I=e.is(Lt),S=s(_,!1),C=s(_,!0),P=n.start||0,T=P;function A(){r=w(!0),o=n.perMove,a=n.perPage,i=L();var e=le(P,0,b?i:r-1);e!==P&&(P=e,d.reposition())}function k(){i!==L()&&u(xe)}function _(e,t){var n=o||(M()?1:a),r=D(P+n*(e?-1:1),P,!(o||M()));return-1===r&&I&&!se(h(),f(!e),1)?e?0:i:t?r:x(r)}function D(t,s,c){if(y()||M()){var l=function(t){if(I&&"move"===n.trimSpace&&t!==P)for(var i=h();i===p(t,!0)&&ce(t,0,e.length-1,!n.rewind);)t<P?--t:++t;return t}(t);l!==t&&(s=t,t=l,c=!1),t<0||t>i?t=o||!ce(0,t,s,!0)&&!ce(i,s,t,!0)?E?c?t<0?-(r%a||a):r:t:n.rewind?t<0?i:0:-1:O(B(t)):c&&t!==s&&(t=O(B(s)+(t<s?-1:1)))}else t=-1;return t}function x(e){return E?(e+r)%r||0:e}function L(){for(var e=r-(M()||E&&o?1:a);b&&e-- >0;)if(p(r-1,!0)!==p(e,!0)){e++;break}return le(e,0,r-1)}function O(e){return le(M()?e:a*e,0,i)}function B(e){return M()?ne(e,i):re((e>=i?r-1:e)/a)}function N(e){e!==P&&(T=P,P=e)}function M(){return!m(n.focus)||n.isNavigation}function F(){return e.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){A(),l([Ee,be,xe],A),l(Se,k)},go:function(e,t,n){if(!F()){var r=function(e){var t=P;if(g(e)){var n=e.match(/([+\-<>])(\d+)?/)||[],r=n[1],o=n[2];"+"===r||"-"===r?t=D(P+ +(""+r+(+o||1)),P):">"===r?t=o?O(+o):S(!0):"<"===r&&(t=C(!0))}else t=E?e:le(e,0,i);return t}(e),o=x(r);o>-1&&(t||o!==P)&&(N(o),d.move(r,o,T,n))}},scroll:function(e,n,r,o){t.Scroll.scroll(e,n,r,(function(){var e=x(d.toIndex(h()));N(b?ne(e,i):e),o&&o()}))},getNext:S,getPrev:C,getAdjacent:_,getEnd:L,setIndex:N,getIndex:function(e){return e?T:P},toIndex:O,toPage:B,toDest:function(e){var t=d.toIndex(e);return I?le(t,0,i):t},hasFocus:M,isBusy:F}},Arrows:function(e,t,n){var i,r,o=Le(e),a=o.on,c=o.bind,l=o.emit,u=n.classes,d=n.i18n,h=t.Elements,f=t.Controller,p=h.arrows,g=h.track,m=p,v=h.prev,y=h.next,w={};function b(){var e;!(e=n.arrows)||v&&y||(m=p||j("div",u.arrows),v=A(!0),y=A(!1),i=!0,P(m,[v,y]),!p&&T(m,g)),v&&y&&(O(w,{prev:v,next:y}),z(m,e?"":"none"),C(m,r=ut+"--"+n.direction),e&&(a([ge,ye,be,Pe,xe],k),c(y,"click",s(S,">")),c(v,"click",s(S,"<")),k(),F([v,y],Ge,g.id),l("arrows:mounted",v,y))),a(Ee,E)}function E(){I(),b()}function I(){o.destroy(),K(m,r),i?(U(p?[v,y]:m),v=y=null):M([v,y],tt)}function S(e){f.go(e,!0)}function A(e){return V('<button class="'+u.arrow+" "+(e?u.prev:u.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function k(){if(v&&y){var t=e.index,n=f.getPrev(),i=f.getNext(),r=n>-1&&t<n?d.last:d.prev,o=i>-1&&t>i?d.first:d.next;v.disabled=n<0,y.disabled=i<0,F(v,qe,r),F(y,qe,o),l("arrows:updated",v,y,n,i)}}return{arrows:w,mount:b,destroy:I,update:k}},Autoplay:function(e,t,n){var i,r,o=Le(e),a=o.on,s=o.bind,c=o.emit,l=Oe(n.interval,e.go.bind(e,">"),(function(e){var t=d.bar;t&&R(t,"width",100*e+"%"),c("autoplay:playing",e)})),u=l.isPaused,d=t.Elements,h=t.Elements,f=h.root,p=h.toggle,g=n.autoplay,m="pause"===g;function v(){u()&&t.Slides.isEnough()&&(l.start(!n.resetProgress),r=i=m=!1,b(),c(ke))}function y(e){void 0===e&&(e=!0),m=!!e,b(),u()||(l.pause(),c(_e))}function w(){m||(i||r?y(!1):v())}function b(){p&&(S(p,bt,!m),F(p,qe,n.i18n[m?"play":"pause"]))}function E(e){var i=t.Slides.getAt(e);l.set(i&&+H(i.slide,Nt)||n.interval)}return{mount:function(){g&&(n.pauseOnHover&&s(f,"mouseenter mouseleave",(function(e){i="mouseenter"===e.type,w()})),n.pauseOnFocus&&s(f,"focusin focusout",(function(e){r="focusin"===e.type,w()})),p&&s(p,"click",(function(){m?v():y(!0)})),a([ve,Ce,be],l.rewind),a(ve,E),p&&F(p,Ge,d.track.id),m||v(),b())},destroy:l.cancel,play:v,pause:y,isPaused:u}},Cover:function(e,t,n){var i=Le(e).on;function r(e){t.Slides.forEach((function(t){var n=D(t.container||t.slide,"img");n&&n.src&&o(e,n,t)}))}function o(e,t,n){n.style("background",e?'center/cover no-repeat url("'+t.src+'")':"",!0),z(t,e?"none":"")}return{mount:function(){n.cover&&(i(De,s(o,!0)),i([ge,Ee,be],s(r,!0)))},destroy:s(r,!1)}},Scroll:function(e,t,n){var i,r,o=Le(e),a=o.on,c=o.emit,l=e.state.set,u=t.Move,d=u.getPosition,h=u.getLimit,f=u.exceededLimit,p=u.translate,g=e.is(Lt),m=1;function v(e,n,o,a,h){var p=d();if(b(),o&&(!g||!f())){var v=t.Layout.sliderSize(),E=ue(e)*v*re(ae(e)/v)||0;e=u.toPosition(t.Controller.toDest(e%v))+E}var I=se(p,e,1);m=1,n=I?0:n||ie(ae(e-p)/1.5,800),r=a,i=Oe(n,y,s(w,p,e,h),1),l(5),c(Ce),i.start()}function y(){l(3),r&&r(),c(Pe)}function w(e,t,i,o){var a=d(),s=e+(t-e)*function(e){var t=n.easingFunc;return t?t(e):1-Math.pow(1-e,4)}(o),c=(s-a)*m;p(a+c),g&&!i&&f()&&(m*=.6,ae(c)<10&&v(h(f(!0)),600,!1,r,!0))}function b(){i&&i.cancel()}function E(){i&&!i.isPaused()&&(b(),y())}return{mount:function(){a(ve,b),a([Ee,be],E)},destroy:b,scroll:v,cancel:E}},Drag:function(e,t,n){var i,r,o,a,s,c,u,d,f=Le(e),p=f.on,g=f.emit,m=f.bind,v=f.unbind,y=e.state,w=t.Move,b=t.Scroll,E=t.Controller,I=t.Elements.track,S=t.Media.reduce,C=t.Direction,P=C.resolve,T=C.orient,k=w.getPosition,_=w.exceededLimit,D=!1;function x(){var e=n.drag;H(!e),a="free"===e}function L(e){if(c=!1,!u){var t=$(e);i=e.target,r=n.noDrag,A(i,"."+gt+", ."+dt)||r&&A(i,r)||!t&&e.button||(E.isBusy()?q(e,!0):(d=t?I:window,s=y.is([4,5]),o=null,m(d,Dt,O,Mt),m(d,xt,B,Mt),w.cancel(),b.cancel(),M(e)))}var i,r}function O(t){if(y.is(6)||(y.set(6),g("drag")),t.cancelable)if(s){w.translate(i+F(t)/(D&&e.is(Lt)?5:1));var r=j(t)>200,o=D!==(D=_());(r||o)&&M(t),c=!0,g("dragging"),q(t)}else(function(e){return ae(F(e))>ae(F(e,!0))})(t)&&(s=function(e){var t=n.dragMinThreshold,i=h(t),r=i&&t.mouse||0,o=(i?t.touch:+t)||10;return ae(F(e))>($(e)?o:r)}(t),q(t))}function B(i){y.is(6)&&(y.set(3),g("dragged")),s&&(function(i){var r=function(t){if(e.is(Ot)||!D){var n=j(t);if(n&&n<200)return F(t)/n}return 0}(i),o=function(e){return k()+ue(e)*ne(ae(e)*(n.flickPower||600),a?1/0:t.Layout.listSize()*(n.flickMaxPages||1))}(r),s=n.rewind&&n.rewindByDrag;S(!1),a?E.scroll(o,0,n.snap):e.is(Bt)?E.go(T(ue(r))<0?s?"<":"-":s?">":"+"):e.is(Lt)&&D&&s?E.go(_(!0)?">":"<"):E.go(E.toDest(o),!0),S(!0)}(i),q(i)),v(d,Dt,O),v(d,xt,B),s=!1}function N(e){!u&&c&&q(e,!0)}function M(e){o=r,r=e,i=k()}function F(e,t){return z(e,t)-z(R(e),t)}function j(e){return Y(e)-Y(R(e))}function R(e){return r===e&&o||r}function z(e,t){return($(e)?e.changedTouches[0]:e)["page"+P(t?"Y":"X")]}function $(e){return"undefined"!=typeof TouchEvent&&e instanceof TouchEvent}function H(e){u=e}return{mount:function(){m(I,Dt,l,Mt),m(I,xt,l,Mt),m(I,_t,L,Mt),m(I,"click",N,{capture:!0}),m(I,"dragstart",q),p([ge,Ee],x)},disable:H,isDragging:function(){return s}}},Keyboard:function(e,t,n){var i,r,o=Le(e),a=o.on,s=o.bind,l=o.unbind,u=e.root,d=t.Direction.resolve;function h(){var e=n.keyboard;e&&(i="global"===e?window:u,s(i,Rt,g))}function f(){l(i,Rt)}function p(){var e=r;r=!0,c((function(){r=e}))}function g(t){if(!r){var n=jt(t);n===d(Ne)?e.go("<"):n===d(Me)&&e.go(">")}}return{mount:function(){h(),a(Ee,f),a(Ee,h),a(ve,p)},destroy:f,disable:function(e){r=e}}},LazyLoad:function(e,t,n){var i=Le(e),r=i.on,a=i.off,c=i.bind,l=i.emit,u="sequential"===n.lazyLoad,d=[ye,Pe],h=[];function f(){o(h),t.Slides.forEach((function(e){J(e.slide,Ht).forEach((function(t){var i=H(t,zt),r=H(t,$t);if(i!==t.src||r!==t.srcset){var o=n.classes.spinner,a=t.parentElement,s=D(a,"."+o)||j("span",o,a);h.push([t,e,s]),t.src||z(t,"none")}}))})),u?v():(a(d),r(d,p),p())}function p(){(h=h.filter((function(t){var i=n.perPage*((n.preloadPages||1)+1)-1;return!t[1].isWithin(e.index,i)||g(t)}))).length||a(d)}function g(e){var t=e[0];C(e[1].slide,Ct),c(t,"load error",s(m,e)),F(t,"src",H(t,zt)),F(t,"srcset",H(t,$t)),M(t,zt),M(t,$t)}function m(e,t){var n=e[0],i=e[1];K(i.slide,Ct),"error"!==t.type&&(U(e[2]),z(n,""),l(De,n,i),l(Ie)),u&&v()}function v(){h.length&&g(h.shift())}return{mount:function(){n.lazyLoad&&(f(),r(be,f))},destroy:s(o,h),check:p}},Pagination:function(e,t,n){var i,r,c=Le(e),l=c.on,u=c.emit,d=c.bind,h=t.Slides,f=t.Elements,p=t.Controller,g=p.hasFocus,m=p.getIndex,v=p.go,y=t.Direction.resolve,w=f.pagination,b=[];function E(){i&&(U(w?a(i.children):i),K(i,r),o(b),i=null),c.destroy()}function I(e){v(">"+e,!0)}function S(e,t){var n=b.length,i=jt(t),r=P(),o=-1;i===y(Me,!1,r)?o=++e%n:i===y(Ne,!1,r)?o=(--e+n)%n:"Home"===i?o=0:"End"===i&&(o=n-1);var a=b[o];a&&($(a.button),v(">"+o),q(t,!0))}function P(){return n.paginationDirection||n.direction}function T(e){return b[p.toPage(e)]}function A(){var e=T(m(!0)),t=T(m());if(e){var n=e.button;K(n,bt),M(n,Ve),F(n,He,-1)}if(t){var r=t.button;C(r,bt),F(r,Ve,!0),F(r,He,"")}u("pagination:updated",{list:i,items:b},e,t)}return{items:b,mount:function t(){E(),l([Ee,be,xe],t);var o=n.pagination;w&&z(w,o?"":"none"),o&&(l([ve,Ce,Pe],A),function(){var t=e.length,o=n.classes,a=n.i18n,c=n.perPage,l=g()?p.getEnd()+1:oe(t/c);C(i=w||j("ul",o.pagination,f.track.parentElement),r=pt+"--"+P()),F(i,$e,"tablist"),F(i,qe,a.select),F(i,Ke,P()===Re?"vertical":"");for(var u=0;u<l;u++){var m=j("li",null,i),v=j("button",{class:o.page,type:"button"},m),y=h.getIn(u).map((function(e){return e.slide.id})),E=!g()&&c>1?a.pageX:a.slideX;d(v,"click",s(I,u)),n.paginationKeyboard&&d(v,"keydown",s(S,u)),F(m,$e,"presentation"),F(v,$e,"tab"),F(v,Ge,y.join(" ")),F(v,qe,de(E,u+1)),F(v,He,-1),b.push({li:m,button:v,page:u})}}(),A(),u("pagination:mounted",{list:i,items:b},T(e.index)))},destroy:E,getAt:T,update:A}},Sync:function(e,t,n){var i=n.isNavigation,r=n.slideFocus,a=[];function c(){var t,n;e.splides.forEach((function(t){t.isParent||(u(e,t.splide),u(t.splide,e))})),i&&((n=(t=Le(e)).on)(we,h),n("sk",f),n([ge,Ee],d),a.push(t),t.emit(Ae,e.splides))}function l(){a.forEach((function(e){e.destroy()})),o(a)}function u(e,t){var n=Le(e);n.on(ve,(function(e,n,i){t.go(t.is(Ot)?i:e)})),a.push(n)}function d(){F(t.Elements.list,Ke,n.direction===Re?"vertical":"")}function h(t){e.go(t.index)}function f(e,t){E(Wt,jt(t))&&(h(e),q(t))}return{setup:s(t.Media.set,{slideFocus:m(r)?i:r},!0),mount:c,destroy:l,remount:function(){l(),c()}}},Wheel:function(e,t,n){var i=Le(e).bind,r=0;function o(i){if(i.cancelable){var o=i.deltaY,a=o<0,s=Y(i),c=n.wheelMinThreshold||0,l=n.wheelSleep||0;ae(o)>c&&s-r>l&&(e.go(a?"<":">"),r=s),function(i){return!n.releaseWheel||e.state.is(4)||-1!==t.Controller.getAdjacent(i)}(a)&&q(i)}}return{mount:function(){n.wheel&&i(t.Elements.track,"wheel",o,Mt)}}},Live:function(e,t,n){var i=Le(e).on,r=t.Elements.track,o=n.live&&!n.isNavigation,a=j("span",yt),c=Oe(90,s(l,!1));function l(e){F(r,Ze,e),e?(P(r,a),c.start()):(U(a),c.cancel())}function u(e){o&&F(r,Qe,e?"off":"polite")}return{mount:function(){o&&(u(!t.Autoplay.isPaused()),F(r,et,!0),a.textContent="…",i(ke,s(u,!0)),i(_e,s(u,!1)),i([ye,Pe],s(l,!0)))},disable:u,destroy:function(){M(r,[Qe,et,Ze]),U(a)}}}}),Ut={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:kt,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Vt(e,t,n){var i=t.Slides;function r(){i.forEach((function(e){e.style("transform","translateX(-"+100*e.index+"%)")}))}return{mount:function(){Le(e).on([ge,be],r)},start:function(e,t){i.style("transition","opacity "+n.speed+"ms "+n.easing),c(t)},cancel:l}}function qt(e,t,n){var i,r=t.Move,o=t.Controller,a=t.Scroll,c=t.Elements.list,l=s(R,c,"transition");function u(){l(""),a.cancel()}return{mount:function(){Le(e).bind(c,"transitionend",(function(e){e.target===c&&i&&(u(),i())}))},start:function(t,s){var c=r.toPosition(t,!0),u=r.getPosition(),d=function(t){var i=n.rewindSpeed;if(e.is(Lt)&&i){var r=o.getIndex(!0),a=o.getEnd();if(0===r&&t>=a||r>=a&&0===t)return i}return n.speed}(t);ae(c-u)>=1&&d>=1?n.useScroll?a.scroll(c,d,!1,s):(l("transform "+d+"ms "+n.easing),r.translate(c,!0),i=s):(r.jump(t),s())},cancel:u}}var Xt=function(){function e(t,n){var i;this.event=Le(),this.Components={},this.state=(i=1,{set:function(e){i=e},is:function(e){return E(w(e),i)}}),this.splides=[],this._o={},this._E={};var r=g(t)?X(document,t):t;te(r,r+" is invalid."),this.root=r,n=B({label:H(r,qe)||"",labelledby:H(r,Xe)||""},Ut,e.defaults,n||{});try{B(n,JSON.parse(H(r,ee)))}catch(e){te(!1,"Invalid JSON")}this._o=Object.create(B({},n))}var t,n,r=e.prototype;return r.mount=function(e,t){var n=this,i=this.state,r=this.Components;return te(i.is([1,7]),"Already mounted!"),i.set(1),this._C=r,this._T=t||this._T||(this.is(Bt)?Vt:qt),this._E=e||this._E,L(O({},Gt,this._E,{Transition:this._T}),(function(e,t){var i=e(n,r,n._o);r[t]=i,i.setup&&i.setup()})),L(r,(function(e){e.mount&&e.mount()})),this.emit(ge),C(this.root,wt),i.set(3),this.emit(me),this},r.sync=function(e){return this.splides.push({splide:e}),e.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),e.Components.Sync.remount()),this},r.go=function(e){return this._C.Controller.go(e),this},r.on=function(e,t){return this.event.on(e,t),this},r.off=function(e){return this.event.off(e),this},r.emit=function(e){var t;return(t=this.event).emit.apply(t,[e].concat(a(arguments,1))),this},r.add=function(e,t){return this._C.Slides.add(e,t),this},r.remove=function(e){return this._C.Slides.remove(e),this},r.is=function(e){return this._o.type===e},r.refresh=function(){return this.emit(be),this},r.destroy=function(e){void 0===e&&(e=!0);var t=this.event,n=this.state;return n.is(1)?Le(this).on(me,this.destroy.bind(this,e)):(L(this._C,(function(t){t.destroy&&t.destroy(e)}),!0),t.emit(Te),t.destroy(),e&&o(this.splides),n.set(7)),this},t=e,(n=[{key:"options",get:function(){return this._o},set:function(e){this._C.Media.set(e,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),Jt=Xt;Jt.defaults={},Jt.STATES={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};class Kt{constructor(e,t){this.emptyGlowImageTag="empty_glow_image",this.currentlyPlayingAudioElement=null,this.currentlyActiveGlowImages=[],this.currentlyActiveWord=null,this.imagesPath=e,this.audioPath=t,this.currentPage=0,this.splideHandle=new Jt(".splide",{fixedHeight:window.innerHeight-20}).mount(),this.splideHandle.on("move",((e,t,n)=>{this.currentPage!==e&&(console.log("Stopping audio for page from move: "+t),this.transitioningToPage=!0,this.stopPageAudio(this.book.pages[t]))})),this.splideHandle.on("moved",((e,t,n)=>{this.currentPage!==e&&(console.log("Playing audio for page from moved: "+e),this.currentPage=e,this.transitioningToPage=!1,this.playPageAudio(this.book.pages[e],e))})),this.splideHandle.on("drag",((e,t,n)=>{this.currentPage!==e&&(console.log("Stopping audio for page from drag: "+t),this.transitioningToPage=!0,this.stopPageAudio(this.book.pages[t]))})),this.splideHandle.on("dragged",((e,t,n)=>{this.currentPage!==e&&(console.log("Playing audio for page from dragged: "+e),this.currentPage=e,this.transitioningToPage=!1,this.playPageAudio(this.book.pages[e],e))})),this.addPageResizeListener(),this.addMinimzationListener()}addMinimzationListener(){document.addEventListener("visibilitychange",(()=>{"visible"===document.visibilityState?this.playPageAudio(this.book.pages[this.currentPage],this.currentPage):this.stopPageAudio(this.book.pages[this.currentPage])}))}stopPageAudio(e){for(let t=0;t<e.visualElements.length;t++){let n=e.visualElements[t];if("audio"===n.type){let e=n,t=document.getElementById(e.domID);t.pause(),t.currentTime=0,clearInterval(this.currentPageAutoPlayerInterval);for(let t=0;t<e.audioTimestamps.timestamps.length;t++){let n=document.getElementById(e.domID+"_word_"+t);n.classList.remove("cr-clickable-word-active"),n.style.color="white"}}}}playPageAudio(e,t){console.log("Attempting to play audio for page: "+t),console.log("Book has: "+this.book.pages.length+" pages"),console.log("The page has "+e.visualElements.length+" visual elements");for(let n=0;n<e.visualElements.length;n++){let i=e.visualElements[n];if("audio"===i.type){let e=i;console.log("Found the audio element in page's visual elements: "+e.audioSrc),console.log("Does the audio element have timestamps? "+(void 0!==e.audioTimestamps?"Yes":"No")),console.log("Audio element domID: "+e.domID);let n=document.getElementById(e.domID);console.log("Audio element dom is null or undefined? "+(null==n?"Yes":"No")),n.play(),this.currentlyPlayingAudioElement=n;let r=0,o=0;console.log("Starting the auto player interval for word highlighting with 60ms interval"),this.currentPageAutoPlayerInterval=setInterval((()=>{if(void 0!==e.audioTimestamps){let i=n.currentTime;for(let n=0;n<e.audioTimestamps.timestamps.length;n++){if(i>=e.audioTimestamps.timestamps[n].startTimestamp&&i<=e.audioTimestamps.timestamps[n].endTimestamp){o=n;let i=document.getElementById(e.domID+"_word_"+o);this.currentlyActiveWord=i,i.classList.add("cr-clickable-word-active"),i.style.color=e.glowColor,this.enableConnectedGraphicHighlighting(t,o)}if(r<o){let t=document.getElementById(e.domID+"_word_"+r);t.classList.remove("cr-clickable-word-active"),t.style.color="white",r=o}}if(i>=e.audioTimestamps.timestamps[e.audioTimestamps.timestamps.length-1].endTimestamp-.1){let t=document.getElementById(e.domID+"_word_"+o);t.classList.remove("cr-clickable-word-active"),t.style.color="white",this.currentlyPlayingAudioElement=null,clearInterval(this.currentPageAutoPlayerInterval)}}}),60)}}}addPageResizeListener(){window.addEventListener("resize",(()=>{this.splideHandle.options.fixedHeight=window.innerHeight-20,this.splideHandle.refresh()}))}initializeBook(t){this.book=t,this.currentBookType=t.bookType,this.numberOfPages=t.pages.length,this.currentBookType===e.CuriousReader?this.initializeCuriousReaderBook(t):this.currentBookType===e.GDL&&this.initializeGDLBook(t)}initializeCuriousReaderBook(e){this.numberOfPages=e.pages.length;for(let t=0;t<e.pages.length;t++){const n=document.createElement("li"),i=document.createElement("div");n.style.display="flex",n.style.justifyContent="center",n.style.alignItems="center",i.style.position="relative",i.style.width="80%",i.style.height="80%",n.appendChild(i),n.classList.add("splide__slide");let r=!1;for(let o=0;o<e.pages[t].visualElements.length;o++){let a=e.pages[t].visualElements[o];if("image"==a.type){let e=a,n=t;i.appendChild(this.createImageContainer(n,e,o))}else if("audio"==a.type){r=!0;let n=a,o=null;for(let n=0;n<e.pages[t].visualElements.length;n++){let i=e.pages[t].visualElements[n];if("text"==i.type){o=i;break}}if(o){let e=this.createAudioAndTextContainers(t,n,o);i.appendChild(e[0]),i.appendChild(e[1])}else i.appendChild(this.createAudioContainer(n))}this.splideHandle.add(n)}if(!r)for(let n=0;n<e.pages[t].visualElements.length;n++){let r=e.pages[t].visualElements[n];if("text"==r.type){let e=r;i.appendChild(this.createTextContainer(e))}}}}createTextContainer(e){let t=document.createElement("div");return t.id="cr-text",t.classList.add("cr-text"),t.style.position="absolute",t.style.webkitTextStroke="1px #303030",t.style.color="#FFFFFF",t.style.textShadow="0.1rem 0.15rem 0.1rem #303030",t.style.fontFamily="Quicksand",t.style.fontWeight="800",t.style.fontSize="inherit",t.style.top=e.positionY+"%",t.style.left=e.positionX+"%",t.style.width=e.width+"%",t.style.height=e.height+"%",t.innerHTML=e.textContentAsHTML.replace(/font-size:[^;]+;/g,""),t}createImageContainer(e,t,n){let i=document.createElement("div");if(i.style.position="absolute",i.style.top=t.positionY+"%",i.style.left=t.positionX+"%",i.style.width=t.width+"%",i.style.height=t.height+"%",t.imageSource===this.emptyGlowImageTag)if(i.classList.add("cr-image-empty-glow"),void 0===t.domID||null===t.domID||""===t.domID){const t="img"+e+"_"+n;i.id=t,i.addEventListener("click",(()=>{this.handleStandaloneGlowImageClick(e,t)}))}else i.classList.add(t.domID),i.addEventListener("click",(()=>{this.handleGlowImageClick(e,t.domID.split("_")[1])}));else{i.id=t.domID,i.classList.add("cr-image");let e=document.createElement("img");e.src=this.imagesPath+t.imageSource.replace("images/",""),e.style.width="100%",e.style.height="100%",i.appendChild(e)}return i}createAudioContainer(e){let t=document.createElement("div");t.classList.add("cr-audio"),t.style.position="absolute";let n=document.createElement("audio");if(n.id=e.domID,n.src=this.audioPath+e.audioSrc.replace("audios/",""),n.controls=!1,t.appendChild(n),void 0!==e.audioTimestamps)for(let n=0;n<e.audioTimestamps.timestamps.length;n++){let i=e.audioTimestamps.timestamps[n],r=document.createElement("audio");r.id=i.domID,r.src=this.audioPath+i.audioSrc.replace("audios/",""),r.controls=!1,t.appendChild(r)}return t}createAudioAndTextContainers(e,t,n){let i=Array(),r=document.createElement("div");r.classList.add("cr-audio"),r.style.position="absolute";let o=document.createElement("audio");o.id=t.domID,o.src=this.audioPath+t.audioSrc.replace("audios/",""),o.controls=!1,r.appendChild(o);let a=Array();if(void 0!==t.audioTimestamps)for(let e=0;e<t.audioTimestamps.timestamps.length;e++){let n=t.audioTimestamps.timestamps[e],i=document.createElement("audio");i.id=n.domID,i.src=this.audioPath+n.audioSrc.replace("audios/",""),i.controls=!1,a.push(n.word.trim()),r.appendChild(i)}i.push(r);let s=t.domID,c=document.createElement("div");c.id="cr-text",c.classList.add("cr-text"),c.style.position="absolute",c.style.display="flex",c.style.justifyContent="center",c.style.alignItems="center",c.style.webkitTextStroke="1px #303030",c.style.color="#FFFFFF",c.style.textShadow="0.1rem 0.15rem 0.1rem #303030",c.style.fontFamily="Quicksand",c.style.fontWeight="800",c.style.top=n.positionY+"%",c.style.height=n.height+"%",n.positionX>50.5?c.style.left=n.positionX+"%":n.positionX<15&&n.width<90?(c.style.left=n.positionX+"%",c.style.width=n.width+"%"):c.style.width="100%";let l=document.createElement("p");l.style.textAlign="center",l.style.margin="0px";for(let t=0;t<a.length;t++){let n=document.createElement("div");n.id=s+"_word_"+t,n.classList.add("cr-clickable-word"),n.style.marginLeft="10px",n.style.marginRight="10px",n.innerText=a[t],n.addEventListener("click",(n=>{this.handleInteractiveWordClick(e,t)})),l.appendChild(n)}return c.appendChild(l),i.push(c),i}handleStandaloneGlowImageClick(e,t){if(null!==this.currentlyPlayingAudioElement&&(this.currentlyPlayingAudioElement.pause(),this.currentlyPlayingAudioElement.currentTime=0,clearInterval(this.currentPageAutoPlayerInterval),clearTimeout(this.currentWordPlayingTimeout),clearTimeout(this.currentGlowImageTimeout),this.currentlyActiveGlowImages.length>0))for(let e=0;e<this.currentlyActiveGlowImages.length;e++)this.currentlyActiveGlowImages[e].style.boxShadow="transparent 0px 0px 20px 20px";this.currentlyActiveGlowImages=Array();let n=document.getElementById(t);this.currentlyActiveGlowImages.push(n),n.style.boxShadow="orange 0px 0px 20px 20px",this.currentGlowImageTimeout=setTimeout((()=>{document.getElementById(t).style.boxShadow="transparent 0px 0px 20px 20px"}),600)}handleGlowImageClick(e,t){let n=parseInt(t);this.handleInteractiveWordClick(e,n)}enableConnectedGraphicHighlighting(e,t){this.handleInteractiveWordClick(e,t,!0)}handleInteractiveWordClick(e,t,n=!1){if(null!==this.currentlyPlayingAudioElement&&!n&&(this.currentlyPlayingAudioElement.pause(),this.currentlyPlayingAudioElement.currentTime=0,clearInterval(this.currentPageAutoPlayerInterval),clearTimeout(this.currentWordPlayingTimeout),clearTimeout(this.currentGlowImageTimeout),null!==this.currentlyActiveWord&&(this.currentlyActiveWord.classList.remove("cr-clickable-word-active"),this.currentlyActiveWord.style.color="white"),this.currentlyActiveGlowImages.length>0))for(let e=0;e<this.currentlyActiveGlowImages.length;e++)this.currentlyActiveGlowImages[e].style.boxShadow="transparent 0px 0px 20px 20px";this.currentlyActiveGlowImages=Array();let i=this.book.pages[e];for(let e=0;e<i.visualElements.length;e++){let r=i.visualElements[e];if("audio"===r.type){let e=r,i=document.getElementById(e.audioTimestamps.timestamps[t].domID);if(!n){let n=document.getElementById(e.domID+"_word_"+t);this.currentlyActiveWord=n,n.classList.add("cr-clickable-word-active"),n.style.color=e.glowColor,this.currentWordPlayingTimeout=setTimeout((()=>{n.classList.remove("cr-clickable-word-active"),n.style.color="white"}),600)}let o="img"+e.domID+"_"+t,a=document.getElementsByClassName(o);for(let t=0;t<a.length;t++){let n=a[t];this.currentlyActiveGlowImages.push(n),n.style.boxShadow=e.glowColor+" 0px 0px 20px 20px"}this.currentGlowImageTimeout=setTimeout((()=>{for(let e=0;e<a.length;e++)a[e].style.boxShadow="transparent 0px 0px 20px 20px"}),600),n||(this.currentlyPlayingAudioElement=i,i.play())}}}initializeGDLBook(e){for(let t=0;t<e.pages.length;t++){const n=document.createElement("li");n.classList.add("splide__slide");let i=document.createElement("div");i.classList.add("gdl-flex-container"),i.style.display="flex",i.style.flexDirection="column",i.style.justifyContent="center",i.style.alignItems="center",i.style.height="100%",i.style.width="100%",n.appendChild(i);for(let n=0;n<e.pages[t].visualElements.length;n++){let r=e.pages[t].visualElements[n];if("text"==r.type){let e=r,t=document.createElement("div");t.style.width="60%",t.classList.add("gdl-text"),t.style.webkitTextStroke="1px #303030",t.style.color="#FFFFFF",t.style.textShadow="0.1rem 0.15rem 0.1rem #303030",t.style.fontFamily="Quicksand",t.style.fontWeight="800",t.style.fontSize="1.7em",t.innerHTML=e.textContentAsHTML.replace("2.25em","28px"),i.appendChild(t)}else if("image"==r.type){let e=r,t=document.createElement("div");t.classList.add("gdl-image");let n=document.createElement("img");n.src=this.imagesPath+e.imageSource.replace("images/",""),n.style.width="100%",n.style.height="100%",t.appendChild(n),i.appendChild(t)}}this.splideHandle.add(n)}}goToNextPage(){this.transitioningToPage||(this.currentPage<this.numberOfPages&&this.currentPage++,this.transitionToPage(this.currentPage))}goToPreviousPage(){this.transitioningToPage||(this.currentPage>0&&this.currentPage--,this.transitionToPage(this.currentPage))}transitionToPage(e){this.transitioningToPage=!0}}try{self["workbox:window:6.5.3"]&&_()}catch(Yt){}function Yt(e,t){return new Promise((function(n){var i=new MessageChannel;i.port1.onmessage=function(e){n(e.data)},e.postMessage(t,[i.port2])}))}function Qt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function Zt(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Qt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0;return function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}try{self["workbox:core:6.5.3"]&&_()}catch(Yt){}var en=function(){var e=this;this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))};function tn(e,t){var n=location.href;return new URL(e,n).href===new URL(t,n).href}var nn=function(e,t){this.type=e,Object.assign(this,t)};function rn(e,t,n){return n?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function on(){}var an={type:"SKIP_WAITING"};function sn(e,t){if(!t)return e&&e.then?e.then(on):Promise.resolve()}var cn=function(e){var t,n;function i(t,n){var i,r;return void 0===n&&(n={}),(i=e.call(this)||this).nn={},i.tn=0,i.rn=new en,i.en=new en,i.on=new en,i.un=0,i.an=new Set,i.cn=function(){var e=i.fn,t=e.installing;i.tn>0||!tn(t.scriptURL,i.sn.toString())||performance.now()>i.un+6e4?(i.vn=t,e.removeEventListener("updatefound",i.cn)):(i.hn=t,i.an.add(t),i.rn.resolve(t)),++i.tn,t.addEventListener("statechange",i.ln)},i.ln=function(e){var t=i.fn,n=e.target,r=n.state,o=n===i.vn,a={sw:n,isExternal:o,originalEvent:e};!o&&i.mn&&(a.isUpdate=!0),i.dispatchEvent(new nn(r,a)),"installed"===r?i.wn=self.setTimeout((function(){"installed"===r&&t.waiting===n&&i.dispatchEvent(new nn("waiting",a))}),200):"activating"===r&&(clearTimeout(i.wn),o||i.en.resolve(n))},i.dn=function(e){var t=i.hn,n=t!==navigator.serviceWorker.controller;i.dispatchEvent(new nn("controlling",{isExternal:n,originalEvent:e,sw:t,isUpdate:i.mn})),n||i.on.resolve(t)},i.gn=(r=function(e){var t=e.data,n=e.ports,r=e.source;return rn(i.getSW(),(function(){i.an.has(r)&&i.dispatchEvent(new nn("message",{data:t,originalEvent:e,ports:n,sw:r}))}))},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];try{return Promise.resolve(r.apply(this,e))}catch(e){return Promise.reject(e)}}),i.sn=t,i.nn=n,navigator.serviceWorker.addEventListener("message",i.gn),i}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var r,o=i.prototype;return o.register=function(e){var t=(void 0===e?{}:e).immediate,n=void 0!==t&&t;try{var i=this;return function(e,t){var n=e();return n&&n.then?n.then(t):t()}((function(){if(!n&&"complete"!==document.readyState)return sn(new Promise((function(e){return window.addEventListener("load",e)})))}),(function(){return i.mn=Boolean(navigator.serviceWorker.controller),i.yn=i.pn(),rn(i.bn(),(function(e){i.fn=e,i.yn&&(i.hn=i.yn,i.en.resolve(i.yn),i.on.resolve(i.yn),i.yn.addEventListener("statechange",i.ln,{once:!0}));var t=i.fn.waiting;return t&&tn(t.scriptURL,i.sn.toString())&&(i.hn=t,Promise.resolve().then((function(){i.dispatchEvent(new nn("waiting",{sw:t,wasWaitingBeforeRegister:!0}))})).then((function(){}))),i.hn&&(i.rn.resolve(i.hn),i.an.add(i.hn)),i.fn.addEventListener("updatefound",i.cn),navigator.serviceWorker.addEventListener("controllerchange",i.dn),i.fn}))}))}catch(e){return Promise.reject(e)}},o.update=function(){try{return this.fn?sn(this.fn.update()):void 0}catch(e){return Promise.reject(e)}},o.getSW=function(){return void 0!==this.hn?Promise.resolve(this.hn):this.rn.promise},o.messageSW=function(e){try{return rn(this.getSW(),(function(t){return Yt(t,e)}))}catch(e){return Promise.reject(e)}},o.messageSkipWaiting=function(){this.fn&&this.fn.waiting&&Yt(this.fn.waiting,an)},o.pn=function(){var e=navigator.serviceWorker.controller;return e&&tn(e.scriptURL,this.sn.toString())?e:void 0},o.bn=function(){try{var e=this;return function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){return rn(navigator.serviceWorker.register(e.sn,e.nn),(function(t){return e.un=performance.now(),t}))}),(function(e){throw e}))}catch(e){return Promise.reject(e)}},(r=[{key:"active",get:function(){return this.en.promise}},{key:"controlling",get:function(){return this.on.promise}}])&&function(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(i.prototype,r),i}(function(){function e(){this.Pn=new Map}var t=e.prototype;return t.addEventListener=function(e,t){this.Sn(e).add(t)},t.removeEventListener=function(e,t){this.Sn(e).delete(t)},t.dispatchEvent=function(e){e.target=this;for(var t,n=Zt(this.Sn(e.type));!(t=n()).done;)(0,t.value)(e)},t.Sn=function(e){return this.Pn.has(e)||this.Pn.set(e,new Set),this.Pn.get(e)},e}());const ln=function(e){const t=[];let n=0;for(let i=0;i<e.length;i++){let r=e.charCodeAt(i);r<128?t[n++]=r:r<2048?(t[n++]=r>>6|192,t[n++]=63&r|128):55296==(64512&r)&&i+1<e.length&&56320==(64512&e.charCodeAt(i+1))?(r=65536+((1023&r)<<10)+(1023&e.charCodeAt(++i)),t[n++]=r>>18|240,t[n++]=r>>12&63|128,t[n++]=r>>6&63|128,t[n++]=63&r|128):(t[n++]=r>>12|224,t[n++]=r>>6&63|128,t[n++]=63&r|128)}return t},un={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let t=0;t<e.length;t+=3){const r=e[t],o=t+1<e.length,a=o?e[t+1]:0,s=t+2<e.length,c=s?e[t+2]:0,l=r>>2,u=(3&r)<<4|a>>4;let d=(15&a)<<2|c>>6,h=63&c;s||(h=64,o||(d=64)),i.push(n[l],n[u],n[d],n[h])}return i.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(ln(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,i=0;for(;n<e.length;){const r=e[n++];if(r<128)t[i++]=String.fromCharCode(r);else if(r>191&&r<224){const o=e[n++];t[i++]=String.fromCharCode((31&r)<<6|63&o)}else if(r>239&&r<365){const o=((7&r)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[i++]=String.fromCharCode(55296+(o>>10)),t[i++]=String.fromCharCode(56320+(1023&o))}else{const o=e[n++],a=e[n++];t[i++]=String.fromCharCode((15&r)<<12|(63&o)<<6|63&a)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let t=0;t<e.length;){const r=n[e.charAt(t++)],o=t<e.length?n[e.charAt(t)]:0;++t;const a=t<e.length?n[e.charAt(t)]:64;++t;const s=t<e.length?n[e.charAt(t)]:64;if(++t,null==r||null==o||null==a||null==s)throw new dn;const c=r<<2|o>>4;if(i.push(c),64!==a){const e=o<<4&240|a>>2;if(i.push(e),64!==s){const e=a<<6&192|s;i.push(e)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class dn extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const hn=function(e){return function(e){const t=ln(e);return un.encodeByteArray(t,!0)}(e).replace(/\./g,"")},fn=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t.g)return t.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&function(e){try{return un.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null}(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},pn=()=>{var e;return null===(e=fn())||void 0===e?void 0:e.config};class gn{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}function mn(){try{return"object"==typeof indexedDB}catch(e){return!1}}function vn(){return new Promise(((e,t)=>{try{let n=!0;const i="validate-browser-context-for-indexeddb-analytics-module",r=self.indexedDB.open(i);r.onsuccess=()=>{r.result.close(),n||self.indexedDB.deleteDatabase(i),e(!0)},r.onupgradeneeded=()=>{n=!1},r.onerror=()=>{var e;t((null===(e=r.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}class yn extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,yn.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,wn.prototype.create)}}class wn{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},i=`${this.service}/${e}`,r=this.errors[e],o=r?function(e,t){return e.replace(bn,((e,n)=>{const i=t[n];return null!=i?String(i):`<${n}?>`}))}(r,n):"Error",a=`${this.serviceName}: ${o} (${i}).`;return new yn(i,a,n)}}const bn=/\{\$([^}]+)}/g;function En(e,t){if(e===t)return!0;const n=Object.keys(e),i=Object.keys(t);for(const r of n){if(!i.includes(r))return!1;const n=e[r],o=t[r];if(In(n)&&In(o)){if(!En(n,o))return!1}else if(n!==o)return!1}for(const e of i)if(!n.includes(e))return!1;return!0}function In(e){return null!==e&&"object"==typeof e}function Sn(e,t=1e3,n=2){const i=t*Math.pow(n,e),r=Math.round(.5*i*(Math.random()-.5)*2);return Math.min(144e5,i+r)}function Cn(e){return e&&e._delegate?e._delegate:e}class Pn{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const Tn="[DEFAULT]";class An{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new gn;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),i=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(i)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:Tn})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e=Tn){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=Tn){return this.instances.has(e)}getOptions(e=Tn){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(i);return i}onInit(e,t){var n;const i=this.normalizeInstanceIdentifier(t),r=null!==(n=this.onInitCallbacks.get(i))&&void 0!==n?n:new Set;r.add(e),this.onInitCallbacks.set(i,r);const o=this.instances.get(i);return o&&e(o,i),()=>{r.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const i of n)try{i(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(i=e,i===Tn?void 0:i),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var i;return n||null}normalizeInstanceIdentifier(e=Tn){return this.component?this.component.multipleInstances?e:Tn:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class kn{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new An(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const _n=[];var Dn;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(Dn||(Dn={}));const xn={debug:Dn.DEBUG,verbose:Dn.VERBOSE,info:Dn.INFO,warn:Dn.WARN,error:Dn.ERROR,silent:Dn.SILENT},Ln=Dn.INFO,On={[Dn.DEBUG]:"log",[Dn.VERBOSE]:"log",[Dn.INFO]:"info",[Dn.WARN]:"warn",[Dn.ERROR]:"error"},Bn=(e,t,...n)=>{if(t<e.logLevel)return;const i=(new Date).toISOString(),r=On[t];if(!r)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[r](`[${i}]  ${e.name}:`,...n)};class Nn{constructor(e){this.name=e,this._logLevel=Ln,this._logHandler=Bn,this._userLogHandler=null,_n.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in Dn))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?xn[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,Dn.DEBUG,...e),this._logHandler(this,Dn.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,Dn.VERBOSE,...e),this._logHandler(this,Dn.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,Dn.INFO,...e),this._logHandler(this,Dn.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,Dn.WARN,...e),this._logHandler(this,Dn.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,Dn.ERROR,...e),this._logHandler(this,Dn.ERROR,...e)}}let Mn,Fn;const jn=new WeakMap,Rn=new WeakMap,zn=new WeakMap,$n=new WeakMap,Hn=new WeakMap;let Wn={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return Rn.get(e);if("objectStoreNames"===t)return e.objectStoreNames||zn.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return Un(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function Gn(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(Fn||(Fn=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(Vn(this),e),Un(jn.get(this))}:function(...e){return Un(t.apply(Vn(this),e))}:function(e,...n){const i=t.call(Vn(this),e,...n);return zn.set(i,e.sort?e.sort():[e]),Un(i)}:(e instanceof IDBTransaction&&function(e){if(Rn.has(e))return;const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("complete",r),e.removeEventListener("error",o),e.removeEventListener("abort",o)},r=()=>{t(),i()},o=()=>{n(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",r),e.addEventListener("error",o),e.addEventListener("abort",o)}));Rn.set(e,t)}(e),n=e,(Mn||(Mn=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,Wn):e);var t,n}function Un(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("success",r),e.removeEventListener("error",o)},r=()=>{t(Un(e.result)),i()},o=()=>{n(e.error),i()};e.addEventListener("success",r),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&jn.set(t,e)})).catch((()=>{})),Hn.set(t,e),t}(e);if($n.has(e))return $n.get(e);const t=Gn(e);return t!==e&&($n.set(e,t),Hn.set(t,e)),t}const Vn=e=>Hn.get(e);function qn(e,t,{blocked:n,upgrade:i,blocking:r,terminated:o}={}){const a=indexedDB.open(e,t),s=Un(a);return i&&a.addEventListener("upgradeneeded",(e=>{i(Un(a.result),e.oldVersion,e.newVersion,Un(a.transaction),e)})),n&&a.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),s.then((e=>{o&&e.addEventListener("close",(()=>o())),r&&e.addEventListener("versionchange",(e=>r(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),s}const Xn=["get","getKey","getAll","getAllKeys","count"],Jn=["put","add","delete","clear"],Kn=new Map;function Yn(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(Kn.get(t))return Kn.get(t);const n=t.replace(/FromIndex$/,""),i=t!==n,r=Jn.includes(n);if(!(n in(i?IDBIndex:IDBObjectStore).prototype)||!r&&!Xn.includes(n))return;const o=async function(e,...t){const o=this.transaction(e,r?"readwrite":"readonly");let a=o.store;return i&&(a=a.index(t.shift())),(await Promise.all([a[n](...t),r&&o.done]))[0]};return Kn.set(t,o),o}var Qn;Qn=Wn,Wn={...Qn,get:(e,t,n)=>Yn(e,t)||Qn.get(e,t,n),has:(e,t)=>!!Yn(e,t)||Qn.has(e,t)};class Zn{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const ei="@firebase/app",ti="0.9.27",ni=new Nn("@firebase/app"),ii="@firebase/app-compat",ri="@firebase/analytics-compat",oi="@firebase/analytics",ai="@firebase/app-check-compat",si="@firebase/app-check",ci="@firebase/auth",li="@firebase/auth-compat",ui="@firebase/database",di="@firebase/database-compat",hi="@firebase/functions",fi="@firebase/functions-compat",pi="@firebase/installations",gi="@firebase/installations-compat",mi="@firebase/messaging",vi="@firebase/messaging-compat",yi="@firebase/performance",wi="@firebase/performance-compat",bi="@firebase/remote-config",Ei="@firebase/remote-config-compat",Ii="@firebase/storage",Si="@firebase/storage-compat",Ci="@firebase/firestore",Pi="@firebase/firestore-compat",Ti="firebase",Ai="[DEFAULT]",ki={[ei]:"fire-core",[ii]:"fire-core-compat",[oi]:"fire-analytics",[ri]:"fire-analytics-compat",[si]:"fire-app-check",[ai]:"fire-app-check-compat",[ci]:"fire-auth",[li]:"fire-auth-compat",[ui]:"fire-rtdb",[di]:"fire-rtdb-compat",[hi]:"fire-fn",[fi]:"fire-fn-compat",[pi]:"fire-iid",[gi]:"fire-iid-compat",[mi]:"fire-fcm",[vi]:"fire-fcm-compat",[yi]:"fire-perf",[wi]:"fire-perf-compat",[bi]:"fire-rc",[Ei]:"fire-rc-compat",[Ii]:"fire-gcs",[Si]:"fire-gcs-compat",[Ci]:"fire-fst",[Pi]:"fire-fst-compat","fire-js":"fire-js",[Ti]:"fire-js-all"},_i=new Map,Di=new Map;function xi(e,t){try{e.container.addComponent(t)}catch(n){ni.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function Li(e){const t=e.name;if(Di.has(t))return ni.debug(`There were multiple attempts to register component ${t}.`),!1;Di.set(t,e);for(const t of _i.values())xi(t,e);return!0}function Oi(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}const Bi=new wn("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class Ni{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new Pn("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw Bi.create("app-deleted",{appName:this._name})}}function Mi(e,t={}){let n=e;"object"!=typeof t&&(t={name:t});const i=Object.assign({name:Ai,automaticDataCollectionEnabled:!1},t),r=i.name;if("string"!=typeof r||!r)throw Bi.create("bad-app-name",{appName:String(r)});if(n||(n=pn()),!n)throw Bi.create("no-options");const o=_i.get(r);if(o){if(En(n,o.options)&&En(i,o.config))return o;throw Bi.create("duplicate-app",{appName:r})}const a=new kn(r);for(const e of Di.values())a.addComponent(e);const s=new Ni(n,i,a);return _i.set(r,s),s}function Fi(e,t,n){var i;let r=null!==(i=ki[e])&&void 0!==i?i:e;n&&(r+=`-${n}`);const o=r.match(/\s|\//),a=t.match(/\s|\//);if(o||a){const e=[`Unable to register library "${r}" with version "${t}":`];return o&&e.push(`library name "${r}" contains illegal characters (whitespace or "/")`),o&&a&&e.push("and"),a&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void ni.warn(e.join(" "))}Li(new Pn(`${r}-version`,(()=>({library:r,version:t})),"VERSION"))}const ji="firebase-heartbeat-store";let Ri=null;function zi(){return Ri||(Ri=qn("firebase-heartbeat-database",1,{upgrade:(e,t)=>{if(0===t)try{e.createObjectStore(ji)}catch(e){console.warn(e)}}}).catch((e=>{throw Bi.create("idb-open",{originalErrorMessage:e.message})}))),Ri}async function $i(e,t){try{const n=(await zi()).transaction(ji,"readwrite"),i=n.objectStore(ji);await i.put(t,Hi(e)),await n.done}catch(e){if(e instanceof yn)ni.warn(e.message);else{const t=Bi.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});ni.warn(t.message)}}}function Hi(e){return`${e.name}!${e.options.appId}`}class Wi{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new Ui(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){var e,t;const n=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),i=Gi();if((null!=(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)||(this._heartbeatsCache=await this._heartbeatsCachePromise,null!=(null===(t=this._heartbeatsCache)||void 0===t?void 0:t.heartbeats)))&&this._heartbeatsCache.lastSentHeartbeatDate!==i&&!this._heartbeatsCache.heartbeats.some((e=>e.date===i)))return this._heartbeatsCache.heartbeats.push({date:i,agent:n}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){var e;if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null==(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)||0===this._heartbeatsCache.heartbeats.length)return"";const t=Gi(),{heartbeatsToSend:n,unsentEntries:i}=function(e,t=1024){const n=[];let i=e.slice();for(const r of e){const e=n.find((e=>e.agent===r.agent));if(e){if(e.dates.push(r.date),Vi(n)>t){e.dates.pop();break}}else if(n.push({agent:r.agent,dates:[r.date]}),Vi(n)>t){n.pop();break}i=i.slice(1)}return{heartbeatsToSend:n,unsentEntries:i}}(this._heartbeatsCache.heartbeats),r=hn(JSON.stringify({version:2,heartbeats:n}));return this._heartbeatsCache.lastSentHeartbeatDate=t,i.length>0?(this._heartbeatsCache.heartbeats=i,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),r}}function Gi(){return(new Date).toISOString().substring(0,10)}class Ui{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!mn()&&vn().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const e=await async function(e){try{const t=(await zi()).transaction(ji),n=await t.objectStore(ji).get(Hi(e));return await t.done,n}catch(e){if(e instanceof yn)ni.warn(e.message);else{const t=Bi.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});ni.warn(t.message)}}}(this.app);return(null==e?void 0:e.heartbeats)?e:{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return $i(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return $i(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function Vi(e){return hn(JSON.stringify({version:2,heartbeats:e})).length}Li(new Pn("platform-logger",(e=>new Zn(e)),"PRIVATE")),Li(new Pn("heartbeat",(e=>new Wi(e)),"PRIVATE")),Fi(ei,ti,""),Fi(ei,ti,"esm2017"),Fi("fire-js",""),Fi("firebase","10.8.0","app");const qi="@firebase/installations",Xi="0.6.5",Ji=`w:${Xi}`,Ki="FIS_v2",Yi=new wn("installations","Installations",{"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."});function Qi(e){return e instanceof yn&&e.code.includes("request-failed")}function Zi({projectId:e}){return`https://firebaseinstallations.googleapis.com/v1/projects/${e}/installations`}function er(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function tr(e,t){const n=(await t.json()).error;return Yi.create("request-failed",{requestName:e,serverCode:n.code,serverMessage:n.message,serverStatus:n.status})}function nr({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}async function ir(e){const t=await e();return t.status>=500&&t.status<600?e():t}function rr(e){return new Promise((t=>{setTimeout(t,e)}))}const or=/^[cdef][\w-]{21}$/;function ar(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){var t;return(t=e,btoa(String.fromCharCode(...t)).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22)}(e);return or.test(t)?t:""}catch(e){return""}}function sr(e){return`${e.appName}!${e.appId}`}const cr=new Map;function lr(e,t){const n=sr(e);ur(n,t),function(e,t){const n=(!dr&&"BroadcastChannel"in self&&(dr=new BroadcastChannel("[Firebase] FID Change"),dr.onmessage=e=>{ur(e.data.key,e.data.fid)}),dr);n&&n.postMessage({key:e,fid:t}),0===cr.size&&dr&&(dr.close(),dr=null)}(n,t)}function ur(e,t){const n=cr.get(e);if(n)for(const e of n)e(t)}let dr=null;const hr="firebase-installations-store";let fr=null;function pr(){return fr||(fr=qn("firebase-installations-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore(hr)}})),fr}async function gr(e,t){const n=sr(e),i=(await pr()).transaction(hr,"readwrite"),r=i.objectStore(hr),o=await r.get(n);return await r.put(t,n),await i.done,o&&o.fid===t.fid||lr(e,t.fid),t}async function mr(e){const t=sr(e),n=(await pr()).transaction(hr,"readwrite");await n.objectStore(hr).delete(t),await n.done}async function vr(e,t){const n=sr(e),i=(await pr()).transaction(hr,"readwrite"),r=i.objectStore(hr),o=await r.get(n),a=t(o);return void 0===a?await r.delete(n):await r.put(a,n),await i.done,!a||o&&o.fid===a.fid||lr(e,a.fid),a}async function yr(e){let t;const n=await vr(e.appConfig,(n=>{const i=function(e){return Er(e||{fid:ar(),registrationStatus:0})}(n),r=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine)return{installationEntry:t,registrationPromise:Promise.reject(Yi.create("app-offline"))};const n={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},i=async function(e,t){try{const n=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:n}){const i=Zi(e),r=nr(e),o=t.getImmediate({optional:!0});if(o){const e=await o.getHeartbeatsHeader();e&&r.append("x-firebase-client",e)}const a={fid:n,authVersion:Ki,appId:e.appId,sdkVersion:Ji},s={method:"POST",headers:r,body:JSON.stringify(a)},c=await ir((()=>fetch(i,s)));if(c.ok){const e=await c.json();return{fid:e.fid||n,registrationStatus:2,refreshToken:e.refreshToken,authToken:er(e.authToken)}}throw await tr("Create Installation",c)}(e,t);return gr(e.appConfig,n)}catch(n){throw Qi(n)&&409===n.customData.serverCode?await mr(e.appConfig):await gr(e.appConfig,{fid:t.fid,registrationStatus:0}),n}}(e,n);return{installationEntry:n,registrationPromise:i}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:wr(e)}:{installationEntry:t}}(e,i);return t=r.registrationPromise,r.installationEntry}));return""===n.fid?{installationEntry:await t}:{installationEntry:n,registrationPromise:t}}async function wr(e){let t=await br(e.appConfig);for(;1===t.registrationStatus;)await rr(100),t=await br(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:n}=await yr(e);return n||t}return t}function br(e){return vr(e,(e=>{if(!e)throw Yi.create("installation-not-found");return Er(e)}))}function Er(e){return 1===(t=e).registrationStatus&&t.registrationTime+1e4<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function Ir({appConfig:e,heartbeatServiceProvider:t},n){const i=function(e,{fid:t}){return`${Zi(e)}/${t}/authTokens:generate`}(e,n),r=function(e,{refreshToken:t}){const n=nr(e);return n.append("Authorization",function(e){return`${Ki} ${e}`}(t)),n}(e,n),o=t.getImmediate({optional:!0});if(o){const e=await o.getHeartbeatsHeader();e&&r.append("x-firebase-client",e)}const a={installation:{sdkVersion:Ji,appId:e.appId}},s={method:"POST",headers:r,body:JSON.stringify(a)},c=await ir((()=>fetch(i,s)));if(c.ok)return er(await c.json());throw await tr("Generate Auth Token",c)}async function Sr(e,t=!1){let n;const i=await vr(e.appConfig,(i=>{if(!Pr(i))throw Yi.create("not-registered");const r=i.authToken;if(!t&&(2===(o=r).requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+36e5}(o)))return i;var o;if(1===r.requestStatus)return n=async function(e,t){let n=await Cr(e.appConfig);for(;1===n.authToken.requestStatus;)await rr(100),n=await Cr(e.appConfig);const i=n.authToken;return 0===i.requestStatus?Sr(e,t):i}(e,t),i;{if(!navigator.onLine)throw Yi.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(i);return n=async function(e,t){try{const n=await Ir(e,t),i=Object.assign(Object.assign({},t),{authToken:n});return await gr(e.appConfig,i),n}catch(n){if(!Qi(n)||401!==n.customData.serverCode&&404!==n.customData.serverCode){const n=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await gr(e.appConfig,n)}else await mr(e.appConfig);throw n}}(e,t),t}}));return n?await n:i.authToken}function Cr(e){return vr(e,(e=>{if(!Pr(e))throw Yi.create("not-registered");return 1===(t=e.authToken).requestStatus&&t.requestTime+1e4<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var t}))}function Pr(e){return void 0!==e&&2===e.registrationStatus}function Tr(e){return Yi.create("missing-app-config-values",{valueName:e})}const Ar="installations";Li(new Pn(Ar,(e=>{const t=e.getProvider("app").getImmediate(),n=function(e){if(!e||!e.options)throw Tr("App Configuration");if(!e.name)throw Tr("App Name");const t=["projectId","apiKey","appId"];for(const n of t)if(!e.options[n])throw Tr(n);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:n,heartbeatServiceProvider:Oi(t,"heartbeat"),_delete:()=>Promise.resolve()}}),"PUBLIC")),Li(new Pn("installations-internal",(e=>{const t=Oi(e.getProvider("app").getImmediate(),Ar).getImmediate();return{getId:()=>async function(e){const t=e,{installationEntry:n,registrationPromise:i}=await yr(t);return i?i.catch(console.error):Sr(t).catch(console.error),n.fid}(t),getToken:e=>async function(e,t=!1){const n=e;return await async function(e){const{registrationPromise:t}=await yr(e);t&&await t}(n),(await Sr(n,t)).token}(t,e)}}),"PRIVATE")),Fi(qi,Xi),Fi(qi,Xi,"esm2017");const kr="analytics",_r="https://www.googletagmanager.com/gtag/js",Dr=new Nn("@firebase/analytics"),xr=new wn("analytics","Analytics",{"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."});function Lr(e){if(!e.startsWith(_r)){const t=xr.create("invalid-gtag-resource",{gtagURL:e});return Dr.warn(t.message),""}return e}function Or(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}const Br=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function Nr(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function Mr(e,t=Br,n){const{appId:i,apiKey:r,measurementId:o}=e.options;if(!i)throw xr.create("no-app-id");if(!r){if(o)return{measurementId:o,appId:i};throw xr.create("no-api-key")}const a=t.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},s=new jr;return setTimeout((async()=>{s.abort()}),void 0!==n?n:6e4),Fr({appId:i,apiKey:r,measurementId:o},a,s,t)}async function Fr(e,{throttleEndTimeMillis:t,backoffCount:n},i,r=Br){var o;const{appId:a,measurementId:s}=e;try{await function(e,t){return new Promise(((n,i)=>{const r=Math.max(t-Date.now(),0),o=setTimeout(n,r);e.addEventListener((()=>{clearTimeout(o),i(xr.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(i,t)}catch(e){if(s)return Dr.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${s} provided in the "measurementId" field in the local Firebase config. [${null==e?void 0:e.message}]`),{appId:a,measurementId:s};throw e}try{const t=await async function(e){var t;const{appId:n,apiKey:i}=e,r={method:"GET",headers:Nr(i)},o="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig".replace("{app-id}",n),a=await fetch(o,r);if(200!==a.status&&304!==a.status){let e="";try{const n=await a.json();(null===(t=n.error)||void 0===t?void 0:t.message)&&(e=n.error.message)}catch(e){}throw xr.create("config-fetch-failed",{httpStatus:a.status,responseMessage:e})}return a.json()}(e);return r.deleteThrottleMetadata(a),t}catch(t){const c=t;if(!function(e){if(!(e instanceof yn&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(c)){if(r.deleteThrottleMetadata(a),s)return Dr.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${s} provided in the "measurementId" field in the local Firebase config. [${null==c?void 0:c.message}]`),{appId:a,measurementId:s};throw t}const l=503===Number(null===(o=null==c?void 0:c.customData)||void 0===o?void 0:o.httpStatus)?Sn(n,r.intervalMillis,30):Sn(n,r.intervalMillis),u={throttleEndTimeMillis:Date.now()+l,backoffCount:n+1};return r.setThrottleMetadata(a,u),Dr.debug(`Calling attemptFetch again in ${l} millis`),Fr(e,u,i,r)}}class jr{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}let Rr,zr;async function $r(e,t,n,i,r,o,a){var s;const c=Mr(e);c.then((t=>{n[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&Dr.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>Dr.error(e))),t.push(c);const l=async function(){if(!mn())return Dr.warn(xr.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await vn()}catch(e){return Dr.warn(xr.create("indexeddb-unavailable",{errorInfo:null==e?void 0:e.toString()}).message),!1}return!0}().then((e=>e?i.getId():void 0)),[u,d]=await Promise.all([c,l]);(function(e){const t=window.document.getElementsByTagName("script");for(const n of Object.values(t))if(n.src&&n.src.includes(_r)&&n.src.includes(e))return n;return null})(o)||function(e,t){const n=function(e,t){let n;return window.trustedTypes&&(n=window.trustedTypes.createPolicy("firebase-js-sdk-policy",t)),n}(0,{createScriptURL:Lr}),i=document.createElement("script"),r=`${_r}?l=${e}&id=${t}`;i.src=n?null==n?void 0:n.createScriptURL(r):r,i.async=!0,document.head.appendChild(i)}(o,u.measurementId),zr&&(r("consent","default",zr),zr=void 0),r("js",new Date);const h=null!==(s=null==a?void 0:a.config)&&void 0!==s?s:{};return h.origin="firebase",h.update=!0,null!=d&&(h.firebase_id=d),r("config",u.measurementId,h),Rr&&(r("set",Rr),Rr=void 0),u.measurementId}class Hr{constructor(e){this.app=e}_delete(){return delete Wr[this.app.options.appId],Promise.resolve()}}let Wr={},Gr=[];const Ur={};let Vr,qr,Xr="dataLayer",Jr=!1;function Kr(e,t,n){!function(){const e=[];if(function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}()&&e.push("This is a browser extension environment."),"undefined"!=typeof navigator&&navigator.cookieEnabled||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),n=xr.create("invalid-analytics-context",{errorInfo:t});Dr.warn(n.message)}}();const i=e.options.appId;if(!i)throw xr.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw xr.create("no-api-key");Dr.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=Wr[i])throw xr.create("already-exists",{id:i});if(!Jr){!function(e){let t=[];Array.isArray(window[e])?t=window[e]:window[e]=t}(Xr);const{wrappedGtag:e,gtagCore:t}=function(e,t,n,i,r){let o=function(...e){window[i].push(arguments)};return window[r]&&"function"==typeof window[r]&&(o=window[r]),window[r]=function(e,t,n,i){return async function(r,...o){try{if("event"===r){const[i,r]=o;await async function(e,t,n,i,r){try{let o=[];if(r&&r.send_to){let e=r.send_to;Array.isArray(e)||(e=[e]);const i=await Or(n);for(const n of e){const e=i.find((e=>e.measurementId===n)),r=e&&t[e.appId];if(!r){o=[];break}o.push(r)}}0===o.length&&(o=Object.values(t)),await Promise.all(o),e("event",i,r||{})}catch(e){Dr.error(e)}}(e,t,n,i,r)}else if("config"===r){const[r,a]=o;await async function(e,t,n,i,r,o){const a=i[r];try{if(a)await t[a];else{const e=(await Or(n)).find((e=>e.measurementId===r));e&&await t[e.appId]}}catch(e){Dr.error(e)}e("config",r,o)}(e,t,n,i,r,a)}else if("consent"===r){const[t]=o;e("consent","update",t)}else if("get"===r){const[t,n,i]=o;e("get",t,n,i)}else if("set"===r){const[t]=o;e("set",t)}else e(r,...o)}catch(e){Dr.error(e)}}}(o,e,t,n),{gtagCore:o,wrappedGtag:window[r]}}(Wr,Gr,Ur,Xr,"gtag");qr=e,Vr=t,Jr=!0}return Wr[i]=$r(e,Gr,Ur,t,Vr,Xr,n),new Hr(e)}function Yr(e,t,n,i){e=Cn(e),async function(e,t,n,i,r){if(r&&r.global)e("event",n,i);else{const r=await t;e("event",n,Object.assign(Object.assign({},i),{send_to:r}))}}(qr,Wr[e.app.options.appId],t,n,i).catch((e=>Dr.error(e)))}const Qr="@firebase/analytics",Zr="0.10.1";Li(new Pn(kr,((e,{options:t})=>Kr(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),Li(new Pn("analytics-internal",(function(e){try{const t=e.getProvider(kr).getImmediate();return{logEvent:(e,n,i)=>Yr(t,e,n,i)}}catch(e){throw xr.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),Fi(Qr,Zr),Fi(Qr,Zr,"esm2017");const eo={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:3bdd502b0e7ce6789de10c",measurementId:"G-XNE7Y2439V"};class to{constructor(){try{this.firebaseApp=Mi(eo),this.firebaseAnalytics=function(e=function(e=Ai){const t=_i.get(e);if(!t&&e===Ai&&pn())return Mi();if(!t)throw Bi.create("no-app",{appName:e});return t}()){const t=Oi(e=Cn(e),kr);return t.isInitialized()?t.getImmediate():function(e,t={}){const n=Oi(e,kr);if(n.isInitialized()){const e=n.getImmediate();if(En(t,n.getOptions()))return e;throw xr.create("already-initialized")}return n.initialize({options:t})}(e)}(this.firebaseApp)}catch(e){console.error("Error while initializing Firebase:",e)}}static getInstance(){return to.instance||(to.instance=new to),to.instance}logEvents(e,t){try{console.log(`Sending custom event ${e} with data:`,t),Yr(this.firebaseAnalytics,e,t)}catch(e){console.error("Error while logging custom event:",e)}}}const no=new BroadcastChannel("my-channel");let io=document.getElementById("loadingScreen");function ro(e){"Loading"==e.data.msg&&function(e,t){let n=document.getElementById("progressBar");t<100?n.style.width=t+"%":t>=100&&(io.style.display="none",localStorage.setItem(e.data.data.bookName,"true"),function(e){if(window.Android){let t=null!==localStorage.getItem(e);window.Android.cachedStatus(t)}}(e.data.data.bookName))}(e,parseInt(e.data.data.progress)),"UpdateFound"==e.data.msg&&(console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>.,update Found"),function(){let e="Update Found.\nPlease accept the update by pressing Ok.";1==confirm(e)?window.location.reload():e="Update will happen on the next launch."}())}no.addEventListener("message",ro);const oo=window.location.search;let ao=new URLSearchParams(oo).get("book");null==ao&&(ao="LetsFlyLevel2En"),console.log("Book Name: "+ao);let so=new class{constructor(e,t,i,r){console.log("Curious Reader App v0.3.4 initializing!"),this.bookName=e,this.contentFilePath=t,this.imagesPath=i,this.audioPath=r,this.firebaseAnalyticsManager=to.getInstance(),this.contentParser=new n(t),this.playBackEngine=new Kt(i,r),this.broadcastChannel=new BroadcastChannel("cr-message-channel")}async initialize(){try{const e=await this.contentParser.parseBook();e.bookName=this.bookName,console.log("App initialized with book:",e),this.enforceLandscapeMode(),await this.registerServiceWorker(e),this.playBackEngine.initializeBook(e),console.log("Initialization completed successfully!")}catch(e){console.error("Initialization error:",e)}}enforceLandscapeMode(){window.Android&&"function"==typeof window.Android.setContainerAppOrientation&&window.Android.setContainerAppOrientation("landscape")}async registerServiceWorker(e){if("serviceWorker"in navigator)try{let t=new cn("/sw.js",{});await t.register(),await navigator.serviceWorker.ready,null==localStorage.getItem(e.bookName)?(io.style.display="flex",this.broadcastChannel.postMessage({command:"Cache",data:{lang:this.lang,bookData:e,contentFile:this.contentFilePath}})):io.style.display="none",this.broadcastChannel.onmessage=t=>{console.log("CRapp: Message Received!"),console.log(t.data.command),"Activated"==t.data.command&&this.broadcastChannel.postMessage({command:"Cache",data:{lang:this.lang,bookData:e,contentFile:this.contentFilePath}})},navigator.serviceWorker.addEventListener("message",ro)}catch(e){console.log("Error Registering Service Worker",e)}}}(ao,`/BookContent/${ao}/content/content.json`,`/BookContent/${ao}/content/images/`,`/BookContent/${ao}/content/audios/`);so.initialize()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,